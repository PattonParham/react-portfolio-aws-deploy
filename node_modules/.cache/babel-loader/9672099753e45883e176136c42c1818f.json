{"ast":null,"code":"var postcss = require('postcss');\n\nvar parser = require('postcss-selector-parser');\n\nfunction parse(str, rule) {\n  var nodes;\n  var saver = parser(function (parsed) {\n    nodes = parsed;\n  });\n\n  try {\n    saver.processSync(str);\n  } catch (e) {\n    if (str.indexOf(':') !== -1) {\n      throw rule ? rule.error('Missed semicolon') : e;\n    } else {\n      throw rule ? rule.error(e.message) : e;\n    }\n  }\n\n  return nodes.at(0);\n}\n\nfunction replace(nodes, parent) {\n  var replaced = false;\n  nodes.each(function (i) {\n    if (i.type === 'nesting') {\n      var clonedParent = parent.clone();\n\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())));\n      } else {\n        i.replaceWith(clonedParent);\n      }\n\n      replaced = true;\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true;\n      }\n    }\n  });\n  return replaced;\n}\n\nfunction selectors(parent, child) {\n  var result = [];\n  parent.selectors.forEach(function (i) {\n    var parentNode = parse(i, parent);\n    child.selectors.forEach(function (j) {\n      var node = parse(j, child);\n      var replaced = replace(node, parentNode);\n\n      if (!replaced) {\n        node.prepend(parser.combinator({\n          value: ' '\n        }));\n        node.prepend(parentNode.clone());\n      }\n\n      result.push(node.toString());\n    });\n  });\n  return result;\n}\n\nfunction pickComment(comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment);\n    return comment;\n  } else {\n    return after;\n  }\n}\n\nfunction atruleChilds(rule, atrule, bubbling) {\n  var children = [];\n  atrule.each(function (child) {\n    if (child.type === 'comment') {\n      children.push(child);\n    } else if (child.type === 'decl') {\n      children.push(child);\n    } else if (child.type === 'rule' && bubbling) {\n      child.selectors = selectors(rule, child);\n    } else if (child.type === 'atrule') {\n      atruleChilds(rule, child, bubbling);\n    }\n  });\n\n  if (bubbling) {\n    if (children.length) {\n      var clone = rule.clone({\n        nodes: []\n      });\n\n      for (var i = 0; i < children.length; i++) {\n        clone.append(children[i]);\n      }\n\n      atrule.prepend(clone);\n    }\n  }\n}\n\nfunction processRule(rule, bubble, unwrap, preserveEmpty) {\n  var unwrapped = false;\n  var after = rule;\n  rule.each(function (child) {\n    if (child.type === 'rule') {\n      unwrapped = true;\n      child.selectors = selectors(rule, child);\n      after = pickComment(child.prev(), after);\n      after.after(child);\n      after = child;\n    } else if (child.type === 'atrule') {\n      if (child.name === 'at-root') {\n        unwrapped = true;\n        atruleChilds(rule, child, false);\n        var nodes = child.nodes;\n\n        if (child.params) {\n          nodes = postcss.rule({\n            selector: child.params,\n            nodes: nodes\n          });\n        }\n\n        after.after(nodes);\n        after = nodes;\n        child.remove();\n      } else if (bubble[child.name]) {\n        unwrapped = true;\n        atruleChilds(rule, child, true);\n        after = pickComment(child.prev(), after);\n        after.after(child);\n        after = child;\n      } else if (unwrap[child.name]) {\n        unwrapped = true;\n        atruleChilds(rule, child, false);\n        after = pickComment(child.prev(), after);\n        after.after(child);\n        after = child;\n      }\n    }\n  });\n\n  if (unwrapped && preserveEmpty !== true) {\n    rule.raws.semicolon = true;\n    if (rule.nodes.length === 0) rule.remove();\n  }\n}\n\nfunction atruleNames(defaults, custom) {\n  var list = {};\n  var i, name;\n\n  for (i = 0; i < defaults.length; i++) {\n    list[defaults[i]] = true;\n  }\n\n  if (custom) {\n    for (i = 0; i < custom.length; i++) {\n      name = custom[i].replace(/^@/, '');\n      list[name] = true;\n    }\n  }\n\n  return list;\n}\n\nmodule.exports = postcss.plugin('postcss-nested', function (opts) {\n  if (!opts) opts = {};\n  var bubble = atruleNames(['media', 'supports'], opts.bubble);\n  var unwrap = atruleNames(['document', 'font-face', 'keyframes'], opts.unwrap);\n  var preserveEmpty = opts ? opts.preserveEmpty : false;\n\n  var process = function (node) {\n    node.each(function (child) {\n      if (child.type === 'rule') {\n        processRule(child, bubble, unwrap, preserveEmpty);\n      } else if (child.type === 'atrule') {\n        process(child);\n      }\n    });\n  };\n\n  return process;\n});","map":{"version":3,"sources":["/Users/pattonparham/Desktop/Coding-Boot-Camp-Work/HW-Assignments/react-portfolio-heroku/node_modules/postcss-nested/index.js"],"names":["postcss","require","parser","parse","str","rule","nodes","saver","parsed","processSync","e","indexOf","error","message","at","replace","parent","replaced","each","i","type","clonedParent","clone","value","replaceWith","toString","selectors","child","result","forEach","parentNode","j","node","prepend","combinator","push","pickComment","comment","after","atruleChilds","atrule","bubbling","children","length","append","processRule","bubble","unwrap","preserveEmpty","unwrapped","prev","name","params","selector","remove","raws","semicolon","atruleNames","defaults","custom","list","module","exports","plugin","opts","process"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,yBAAD,CAApB;;AAEA,SAASE,KAAT,CAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;AACzB,MAAIC,KAAJ;AACA,MAAIC,KAAK,GAAGL,MAAM,CAAC,UAAUM,MAAV,EAAkB;AACnCF,IAAAA,KAAK,GAAGE,MAAR;AACD,GAFiB,CAAlB;;AAGA,MAAI;AACFD,IAAAA,KAAK,CAACE,WAAN,CAAkBL,GAAlB;AACD,GAFD,CAEE,OAAOM,CAAP,EAAU;AACV,QAAIN,GAAG,CAACO,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AAC3B,YAAMN,IAAI,GAAGA,IAAI,CAACO,KAAL,CAAW,kBAAX,CAAH,GAAoCF,CAA9C;AACD,KAFD,MAEO;AACL,YAAML,IAAI,GAAGA,IAAI,CAACO,KAAL,CAAWF,CAAC,CAACG,OAAb,CAAH,GAA2BH,CAArC;AACD;AACF;;AACD,SAAOJ,KAAK,CAACQ,EAAN,CAAS,CAAT,CAAP;AACD;;AAED,SAASC,OAAT,CAAkBT,KAAlB,EAAyBU,MAAzB,EAAiC;AAC/B,MAAIC,QAAQ,GAAG,KAAf;AACAX,EAAAA,KAAK,CAACY,IAAN,CAAW,UAAUC,CAAV,EAAa;AACtB,QAAIA,CAAC,CAACC,IAAF,KAAW,SAAf,EAA0B;AACxB,UAAIC,YAAY,GAAGL,MAAM,CAACM,KAAP,EAAnB;;AACA,UAAIH,CAAC,CAACI,KAAF,KAAY,GAAhB,EAAqB;AACnBJ,QAAAA,CAAC,CAACK,WAAF,CAAcrB,KAAK,CAACgB,CAAC,CAACI,KAAF,CAAQR,OAAR,CAAgB,GAAhB,EAAqBM,YAAY,CAACI,QAAb,EAArB,CAAD,CAAnB;AACD,OAFD,MAEO;AACLN,QAAAA,CAAC,CAACK,WAAF,CAAcH,YAAd;AACD;;AACDJ,MAAAA,QAAQ,GAAG,IAAX;AACD,KARD,MAQO,IAAIE,CAAC,CAACb,KAAN,EAAa;AAClB,UAAIS,OAAO,CAACI,CAAD,EAAIH,MAAJ,CAAX,EAAwB;AACtBC,QAAAA,QAAQ,GAAG,IAAX;AACD;AACF;AACF,GAdD;AAeA,SAAOA,QAAP;AACD;;AAED,SAASS,SAAT,CAAoBV,MAApB,EAA4BW,KAA5B,EAAmC;AACjC,MAAIC,MAAM,GAAG,EAAb;AACAZ,EAAAA,MAAM,CAACU,SAAP,CAAiBG,OAAjB,CAAyB,UAAUV,CAAV,EAAa;AACpC,QAAIW,UAAU,GAAG3B,KAAK,CAACgB,CAAD,EAAIH,MAAJ,CAAtB;AAEAW,IAAAA,KAAK,CAACD,SAAN,CAAgBG,OAAhB,CAAwB,UAAUE,CAAV,EAAa;AACnC,UAAIC,IAAI,GAAG7B,KAAK,CAAC4B,CAAD,EAAIJ,KAAJ,CAAhB;AACA,UAAIV,QAAQ,GAAGF,OAAO,CAACiB,IAAD,EAAOF,UAAP,CAAtB;;AACA,UAAI,CAACb,QAAL,EAAe;AACbe,QAAAA,IAAI,CAACC,OAAL,CAAa/B,MAAM,CAACgC,UAAP,CAAkB;AAAEX,UAAAA,KAAK,EAAE;AAAT,SAAlB,CAAb;AACAS,QAAAA,IAAI,CAACC,OAAL,CAAaH,UAAU,CAACR,KAAX,EAAb;AACD;;AACDM,MAAAA,MAAM,CAACO,IAAP,CAAYH,IAAI,CAACP,QAAL,EAAZ;AACD,KARD;AASD,GAZD;AAaA,SAAOG,MAAP;AACD;;AAED,SAASQ,WAAT,CAAsBC,OAAtB,EAA+BC,KAA/B,EAAsC;AACpC,MAAID,OAAO,IAAIA,OAAO,CAACjB,IAAR,KAAiB,SAAhC,EAA2C;AACzCkB,IAAAA,KAAK,CAACA,KAAN,CAAYD,OAAZ;AACA,WAAOA,OAAP;AACD,GAHD,MAGO;AACL,WAAOC,KAAP;AACD;AACF;;AAED,SAASC,YAAT,CAAuBlC,IAAvB,EAA6BmC,MAA7B,EAAqCC,QAArC,EAA+C;AAC7C,MAAIC,QAAQ,GAAG,EAAf;AACAF,EAAAA,MAAM,CAACtB,IAAP,CAAY,UAAUS,KAAV,EAAiB;AAC3B,QAAIA,KAAK,CAACP,IAAN,KAAe,SAAnB,EAA8B;AAC5BsB,MAAAA,QAAQ,CAACP,IAAT,CAAcR,KAAd;AACD,KAFD,MAEO,IAAIA,KAAK,CAACP,IAAN,KAAe,MAAnB,EAA2B;AAChCsB,MAAAA,QAAQ,CAACP,IAAT,CAAcR,KAAd;AACD,KAFM,MAEA,IAAIA,KAAK,CAACP,IAAN,KAAe,MAAf,IAAyBqB,QAA7B,EAAuC;AAC5Cd,MAAAA,KAAK,CAACD,SAAN,GAAkBA,SAAS,CAACrB,IAAD,EAAOsB,KAAP,CAA3B;AACD,KAFM,MAEA,IAAIA,KAAK,CAACP,IAAN,KAAe,QAAnB,EAA6B;AAClCmB,MAAAA,YAAY,CAAClC,IAAD,EAAOsB,KAAP,EAAcc,QAAd,CAAZ;AACD;AACF,GAVD;;AAWA,MAAIA,QAAJ,EAAc;AACZ,QAAIC,QAAQ,CAACC,MAAb,EAAqB;AACnB,UAAIrB,KAAK,GAAGjB,IAAI,CAACiB,KAAL,CAAW;AAAEhB,QAAAA,KAAK,EAAE;AAAT,OAAX,CAAZ;;AACA,WAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuB,QAAQ,CAACC,MAA7B,EAAqCxB,CAAC,EAAtC,EAA0C;AACxCG,QAAAA,KAAK,CAACsB,MAAN,CAAaF,QAAQ,CAACvB,CAAD,CAArB;AACD;;AACDqB,MAAAA,MAAM,CAACP,OAAP,CAAeX,KAAf;AACD;AACF;AACF;;AAED,SAASuB,WAAT,CAAsBxC,IAAtB,EAA4ByC,MAA5B,EAAoCC,MAApC,EAA4CC,aAA5C,EAA2D;AACzD,MAAIC,SAAS,GAAG,KAAhB;AACA,MAAIX,KAAK,GAAGjC,IAAZ;AAEAA,EAAAA,IAAI,CAACa,IAAL,CAAU,UAAUS,KAAV,EAAiB;AACzB,QAAIA,KAAK,CAACP,IAAN,KAAe,MAAnB,EAA2B;AACzB6B,MAAAA,SAAS,GAAG,IAAZ;AACAtB,MAAAA,KAAK,CAACD,SAAN,GAAkBA,SAAS,CAACrB,IAAD,EAAOsB,KAAP,CAA3B;AACAW,MAAAA,KAAK,GAAGF,WAAW,CAACT,KAAK,CAACuB,IAAN,EAAD,EAAeZ,KAAf,CAAnB;AACAA,MAAAA,KAAK,CAACA,KAAN,CAAYX,KAAZ;AACAW,MAAAA,KAAK,GAAGX,KAAR;AACD,KAND,MAMO,IAAIA,KAAK,CAACP,IAAN,KAAe,QAAnB,EAA6B;AAClC,UAAIO,KAAK,CAACwB,IAAN,KAAe,SAAnB,EAA8B;AAC5BF,QAAAA,SAAS,GAAG,IAAZ;AACAV,QAAAA,YAAY,CAAClC,IAAD,EAAOsB,KAAP,EAAc,KAAd,CAAZ;AAEA,YAAIrB,KAAK,GAAGqB,KAAK,CAACrB,KAAlB;;AACA,YAAIqB,KAAK,CAACyB,MAAV,EAAkB;AAChB9C,UAAAA,KAAK,GAAGN,OAAO,CAACK,IAAR,CAAa;AACnBgD,YAAAA,QAAQ,EAAE1B,KAAK,CAACyB,MADG;AAEnB9C,YAAAA,KAAK,EAAEA;AAFY,WAAb,CAAR;AAID;;AAEDgC,QAAAA,KAAK,CAACA,KAAN,CAAYhC,KAAZ;AACAgC,QAAAA,KAAK,GAAGhC,KAAR;AACAqB,QAAAA,KAAK,CAAC2B,MAAN;AACD,OAfD,MAeO,IAAIR,MAAM,CAACnB,KAAK,CAACwB,IAAP,CAAV,EAAwB;AAC7BF,QAAAA,SAAS,GAAG,IAAZ;AACAV,QAAAA,YAAY,CAAClC,IAAD,EAAOsB,KAAP,EAAc,IAAd,CAAZ;AACAW,QAAAA,KAAK,GAAGF,WAAW,CAACT,KAAK,CAACuB,IAAN,EAAD,EAAeZ,KAAf,CAAnB;AACAA,QAAAA,KAAK,CAACA,KAAN,CAAYX,KAAZ;AACAW,QAAAA,KAAK,GAAGX,KAAR;AACD,OANM,MAMA,IAAIoB,MAAM,CAACpB,KAAK,CAACwB,IAAP,CAAV,EAAwB;AAC7BF,QAAAA,SAAS,GAAG,IAAZ;AACAV,QAAAA,YAAY,CAAClC,IAAD,EAAOsB,KAAP,EAAc,KAAd,CAAZ;AACAW,QAAAA,KAAK,GAAGF,WAAW,CAACT,KAAK,CAACuB,IAAN,EAAD,EAAeZ,KAAf,CAAnB;AACAA,QAAAA,KAAK,CAACA,KAAN,CAAYX,KAAZ;AACAW,QAAAA,KAAK,GAAGX,KAAR;AACD;AACF;AACF,GArCD;;AAsCA,MAAIsB,SAAS,IAAID,aAAa,KAAK,IAAnC,EAAyC;AACvC3C,IAAAA,IAAI,CAACkD,IAAL,CAAUC,SAAV,GAAsB,IAAtB;AACA,QAAInD,IAAI,CAACC,KAAL,CAAWqC,MAAX,KAAsB,CAA1B,EAA6BtC,IAAI,CAACiD,MAAL;AAC9B;AACF;;AAED,SAASG,WAAT,CAAsBC,QAAtB,EAAgCC,MAAhC,EAAwC;AACtC,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIzC,CAAJ,EAAOgC,IAAP;;AACA,OAAKhC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGuC,QAAQ,CAACf,MAAzB,EAAiCxB,CAAC,EAAlC,EAAsC;AACpCyC,IAAAA,IAAI,CAACF,QAAQ,CAACvC,CAAD,CAAT,CAAJ,GAAoB,IAApB;AACD;;AACD,MAAIwC,MAAJ,EAAY;AACV,SAAKxC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGwC,MAAM,CAAChB,MAAvB,EAA+BxB,CAAC,EAAhC,EAAoC;AAClCgC,MAAAA,IAAI,GAAGQ,MAAM,CAACxC,CAAD,CAAN,CAAUJ,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,CAAP;AACA6C,MAAAA,IAAI,CAACT,IAAD,CAAJ,GAAa,IAAb;AACD;AACF;;AACD,SAAOS,IAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB9D,OAAO,CAAC+D,MAAR,CAAe,gBAAf,EAAiC,UAAUC,IAAV,EAAgB;AAChE,MAAI,CAACA,IAAL,EAAWA,IAAI,GAAG,EAAP;AACX,MAAIlB,MAAM,GAAGW,WAAW,CAAC,CAAC,OAAD,EAAU,UAAV,CAAD,EAAwBO,IAAI,CAAClB,MAA7B,CAAxB;AACA,MAAIC,MAAM,GAAGU,WAAW,CAAC,CAAC,UAAD,EAAa,WAAb,EAA0B,WAA1B,CAAD,EAAyCO,IAAI,CAACjB,MAA9C,CAAxB;AACA,MAAIC,aAAa,GAAGgB,IAAI,GAAGA,IAAI,CAAChB,aAAR,GAAwB,KAAhD;;AAEA,MAAIiB,OAAO,GAAG,UAAUjC,IAAV,EAAgB;AAC5BA,IAAAA,IAAI,CAACd,IAAL,CAAU,UAAUS,KAAV,EAAiB;AACzB,UAAIA,KAAK,CAACP,IAAN,KAAe,MAAnB,EAA2B;AACzByB,QAAAA,WAAW,CAAClB,KAAD,EAAQmB,MAAR,EAAgBC,MAAhB,EAAwBC,aAAxB,CAAX;AACD,OAFD,MAEO,IAAIrB,KAAK,CAACP,IAAN,KAAe,QAAnB,EAA6B;AAClC6C,QAAAA,OAAO,CAACtC,KAAD,CAAP;AACD;AACF,KAND;AAOD,GARD;;AASA,SAAOsC,OAAP;AACD,CAhBgB,CAAjB","sourcesContent":["var postcss = require('postcss')\nvar parser = require('postcss-selector-parser')\n\nfunction parse (str, rule) {\n  var nodes\n  var saver = parser(function (parsed) {\n    nodes = parsed\n  })\n  try {\n    saver.processSync(str)\n  } catch (e) {\n    if (str.indexOf(':') !== -1) {\n      throw rule ? rule.error('Missed semicolon') : e\n    } else {\n      throw rule ? rule.error(e.message) : e\n    }\n  }\n  return nodes.at(0)\n}\n\nfunction replace (nodes, parent) {\n  var replaced = false\n  nodes.each(function (i) {\n    if (i.type === 'nesting') {\n      var clonedParent = parent.clone()\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())))\n      } else {\n        i.replaceWith(clonedParent)\n      }\n      replaced = true\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true\n      }\n    }\n  })\n  return replaced\n}\n\nfunction selectors (parent, child) {\n  var result = []\n  parent.selectors.forEach(function (i) {\n    var parentNode = parse(i, parent)\n\n    child.selectors.forEach(function (j) {\n      var node = parse(j, child)\n      var replaced = replace(node, parentNode)\n      if (!replaced) {\n        node.prepend(parser.combinator({ value: ' ' }))\n        node.prepend(parentNode.clone())\n      }\n      result.push(node.toString())\n    })\n  })\n  return result\n}\n\nfunction pickComment (comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment)\n    return comment\n  } else {\n    return after\n  }\n}\n\nfunction atruleChilds (rule, atrule, bubbling) {\n  var children = []\n  atrule.each(function (child) {\n    if (child.type === 'comment') {\n      children.push(child)\n    } else if (child.type === 'decl') {\n      children.push(child)\n    } else if (child.type === 'rule' && bubbling) {\n      child.selectors = selectors(rule, child)\n    } else if (child.type === 'atrule') {\n      atruleChilds(rule, child, bubbling)\n    }\n  })\n  if (bubbling) {\n    if (children.length) {\n      var clone = rule.clone({ nodes: [] })\n      for (var i = 0; i < children.length; i++) {\n        clone.append(children[i])\n      }\n      atrule.prepend(clone)\n    }\n  }\n}\n\nfunction processRule (rule, bubble, unwrap, preserveEmpty) {\n  var unwrapped = false\n  var after = rule\n\n  rule.each(function (child) {\n    if (child.type === 'rule') {\n      unwrapped = true\n      child.selectors = selectors(rule, child)\n      after = pickComment(child.prev(), after)\n      after.after(child)\n      after = child\n    } else if (child.type === 'atrule') {\n      if (child.name === 'at-root') {\n        unwrapped = true\n        atruleChilds(rule, child, false)\n\n        var nodes = child.nodes\n        if (child.params) {\n          nodes = postcss.rule({\n            selector: child.params,\n            nodes: nodes\n          })\n        }\n\n        after.after(nodes)\n        after = nodes\n        child.remove()\n      } else if (bubble[child.name]) {\n        unwrapped = true\n        atruleChilds(rule, child, true)\n        after = pickComment(child.prev(), after)\n        after.after(child)\n        after = child\n      } else if (unwrap[child.name]) {\n        unwrapped = true\n        atruleChilds(rule, child, false)\n        after = pickComment(child.prev(), after)\n        after.after(child)\n        after = child\n      }\n    }\n  })\n  if (unwrapped && preserveEmpty !== true) {\n    rule.raws.semicolon = true\n    if (rule.nodes.length === 0) rule.remove()\n  }\n}\n\nfunction atruleNames (defaults, custom) {\n  var list = { }\n  var i, name\n  for (i = 0; i < defaults.length; i++) {\n    list[defaults[i]] = true\n  }\n  if (custom) {\n    for (i = 0; i < custom.length; i++) {\n      name = custom[i].replace(/^@/, '')\n      list[name] = true\n    }\n  }\n  return list\n}\n\nmodule.exports = postcss.plugin('postcss-nested', function (opts) {\n  if (!opts) opts = { }\n  var bubble = atruleNames(['media', 'supports'], opts.bubble)\n  var unwrap = atruleNames(['document', 'font-face', 'keyframes'], opts.unwrap)\n  var preserveEmpty = opts ? opts.preserveEmpty : false\n\n  var process = function (node) {\n    node.each(function (child) {\n      if (child.type === 'rule') {\n        processRule(child, bubble, unwrap, preserveEmpty)\n      } else if (child.type === 'atrule') {\n        process(child)\n      }\n    })\n  }\n  return process\n})\n"]},"metadata":{},"sourceType":"script"}